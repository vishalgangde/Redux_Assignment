{"ast":null,"code":"/*import React from 'react';\nimport { Field,reduxForm} from 'redux-form';\nimport { connect } from 'react-redux';\nimport { userUpdateAction } from '../../actions/index';\n\nclass UserUpdate extends React.Component{\n    renderError({touched,error}){\n        console.log({error});\n        \n        if(touched && error ){\n            return(\n                <div className=\"ui error message\">\n                    <div className=\"header\">{error}</div>\n                </div>\n            );\n        }\n    }\n\n    renderInput = ({input,type,label,meta}) => {\n        const className = `field ${meta.error && meta.touched ? 'error' : ''}`;\n        \n        return(\n                <div className={className}>\n                    <label>{label}</label>\n                    <input {...input} type={type} autoComplete=\"off\" />\n                    {this.renderError(meta)}\n            </div>\n        );\n        \n    }\n\n    onSubmit(formValues){\n        console.log(formValues);\n        \n    }\n\n    render(){\n        console.log(this.props);\n        return(\n            <div>\n                <h2>User Update</h2 >\n            <form onSubmit={this.props.handleSubmit(this.onSubmit)} className=\"ui form error\">\n                <Field  \n                    type=\"text\" \n                    name=\"first_name\" \n                    component={this.renderInput} \n                    label=\"First Name\" \n                />\n                <Field  \n                    type=\"text\" \n                    name=\"last_name\" \n                    component={this.renderInput} \n                    label=\"Last Name\" \n                />\n                <Field  \n                    type=\"text\" \n                    name=\"user_name\" \n                    component={this.renderInput} \n                    label=\"UserName\" \n                />\n                <Field  \n                    type=\"email\" \n                    name=\"email_id\" \n                    component={this.renderInput} \n                    label=\"Email ID\" \n                />\n                <Field  \n                    type=\"password\" \n                    name=\"password\" \n                    component={this.renderInput} \n                    label=\"Password\" \n                />\n                <Field  \n                    type=\"password\" \n                    name=\"cfm_password\" \n                    component={this.renderInput} \n                    label=\"Confirm Password\" \n                />\n                <button type=\"submit\" className=\"ui button primary\">Submit</button>\n            </form>\n            </div>\n            \n        );\n    }\n}\n\nconst validate = (formValues) => {\n    const error = {};\n\n    if(!formValues.first_name){\n        error.first_name = 'Please Enter First Name';\n    }\n\n    if(!formValues.last_name){\n        error.last_name = 'Please Enter Last Name ';\n    }\n\n    if(!formValues.user_name){\n        error.user_name = 'Please Enter Username';\n    }\n\n    if(!formValues.email_id){\n        error.email_id = 'please enter email id';\n    }\n\n    if(!formValues.password){\n        error.password = 'Please Enter password';\n    }\n\n    if(!formValues.cfm_password){\n        error.cfm_password = 'Please confirm password';\n    }\n\n    return error;\n\n}\n\nconst wrapped = reduxForm({\n    form : 'User Upadte',\n    validate\n})(UserUpdate);\n\nexport default connect(null,{userUpdateAction})(wrapped);*/","map":{"version":3,"sources":["/home/vishal/userposts/src/components/posts/UserUpdate.js"],"names":[],"mappings":"AAAA","sourcesContent":["/*import React from 'react';\nimport { Field,reduxForm} from 'redux-form';\nimport { connect } from 'react-redux';\nimport { userUpdateAction } from '../../actions/index';\n\nclass UserUpdate extends React.Component{\n    renderError({touched,error}){\n        console.log({error});\n        \n        if(touched && error ){\n            return(\n                <div className=\"ui error message\">\n                    <div className=\"header\">{error}</div>\n                </div>\n            );\n        }\n    }\n\n    renderInput = ({input,type,label,meta}) => {\n        const className = `field ${meta.error && meta.touched ? 'error' : ''}`;\n        \n        return(\n                <div className={className}>\n                    <label>{label}</label>\n                    <input {...input} type={type} autoComplete=\"off\" />\n                    {this.renderError(meta)}\n            </div>\n        );\n        \n    }\n\n    onSubmit(formValues){\n        console.log(formValues);\n        \n    }\n\n    render(){\n        console.log(this.props);\n        return(\n            <div>\n                <h2>User Update</h2 >\n            <form onSubmit={this.props.handleSubmit(this.onSubmit)} className=\"ui form error\">\n                <Field  \n                    type=\"text\" \n                    name=\"first_name\" \n                    component={this.renderInput} \n                    label=\"First Name\" \n                />\n                <Field  \n                    type=\"text\" \n                    name=\"last_name\" \n                    component={this.renderInput} \n                    label=\"Last Name\" \n                />\n                <Field  \n                    type=\"text\" \n                    name=\"user_name\" \n                    component={this.renderInput} \n                    label=\"UserName\" \n                />\n                <Field  \n                    type=\"email\" \n                    name=\"email_id\" \n                    component={this.renderInput} \n                    label=\"Email ID\" \n                />\n                <Field  \n                    type=\"password\" \n                    name=\"password\" \n                    component={this.renderInput} \n                    label=\"Password\" \n                />\n                <Field  \n                    type=\"password\" \n                    name=\"cfm_password\" \n                    component={this.renderInput} \n                    label=\"Confirm Password\" \n                />\n                <button type=\"submit\" className=\"ui button primary\">Submit</button>\n            </form>\n            </div>\n            \n        );\n    }\n}\n\nconst validate = (formValues) => {\n    const error = {};\n\n    if(!formValues.first_name){\n        error.first_name = 'Please Enter First Name';\n    }\n\n    if(!formValues.last_name){\n        error.last_name = 'Please Enter Last Name ';\n    }\n\n    if(!formValues.user_name){\n        error.user_name = 'Please Enter Username';\n    }\n\n    if(!formValues.email_id){\n        error.email_id = 'please enter email id';\n    }\n\n    if(!formValues.password){\n        error.password = 'Please Enter password';\n    }\n\n    if(!formValues.cfm_password){\n        error.cfm_password = 'Please confirm password';\n    }\n\n    return error;\n\n}\n\nconst wrapped = reduxForm({\n    form : 'User Upadte',\n    validate\n})(UserUpdate);\n\nexport default connect(null,{userUpdateAction})(wrapped);*/"]},"metadata":{},"sourceType":"module"}