{"ast":null,"code":"import _classCallCheck from \"/home/vishal/userposts/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/vishal/userposts/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/vishal/userposts/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/vishal/userposts/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/vishal/userposts/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/vishal/userposts/src/components/posts/CreatePost.js\";\nimport React from 'react';\nimport { Field, reduxForm } from 'redux-form';\nimport { connect } from 'react-redux';\nimport { createpost } from '../../actions/index';\n\nvar CreatePost =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(CreatePost, _React$Component);\n\n  function CreatePost() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, CreatePost);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(CreatePost)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.renderInput = function (_ref) {\n      var input = _ref.input,\n          label = _ref.label,\n          meta = _ref.meta;\n      var className = \"field \".concat(meta.error && meta.touched ? 'error' : ''); //console.log(meta);\n\n      return React.createElement(\"div\", {\n        className: className,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 24\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 25\n        },\n        __self: this\n      }, label), React.createElement(\"input\", Object.assign({}, input, {\n        autoComplete: \"off\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 26\n        },\n        __self: this\n      })), _this.renderError(meta));\n    };\n\n    _this.onSubmit = function (formValues) {\n      _this.props.createpost(formValues);\n    };\n\n    return _this;\n  }\n\n  _createClass(CreatePost, [{\n    key: \"renderError\",\n    value: function renderError(_ref2) {\n      var touched = _ref2.touched,\n          error = _ref2.error;\n\n      if (touched && error) {\n        return React.createElement(\"div\", {\n          className: \"ui error message\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 12\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"header\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 13\n          },\n          __self: this\n        }, error));\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      //console.log(this.props);\n      if (localStorage.getItem(\"authToken\")) {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 42\n          },\n          __self: this\n        }, React.createElement(\"h2\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 43\n          },\n          __self: this\n        }, \"Create Post\"), React.createElement(\"form\", {\n          onSubmit: this.props.handleSubmit(this.onSubmit),\n          className: \"ui form error\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 44\n          },\n          __self: this\n        }, React.createElement(Field, {\n          inputType: \"text\",\n          name: \"Title\",\n          component: this.renderInput,\n          label: \"Enter Title\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 45\n          },\n          __self: this\n        }), React.createElement(Field, {\n          inputType: \"text\",\n          name: \"Description\",\n          component: this.renderInput,\n          label: \"Enter Description\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 46\n          },\n          __self: this\n        }), React.createElement(Field, {\n          inputType: \"text\",\n          name: \"Status\",\n          component: this.renderInput,\n          label: \"Status\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 47\n          },\n          __self: this\n        }), React.createElement(\"button\", {\n          className: \"ui button primary\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 48\n          },\n          __self: this\n        }, \"Submit\")));\n      }\n\n      var validate = function validate(formValues) {\n        var error = {};\n\n        if (!formValues.Title) {\n          error.Title = 'Please Enter a title';\n        }\n\n        if (!formValues.Description) {\n          error.Description = 'Please Enter a description';\n        }\n\n        if (!formValues.Status) {\n          error.Status = 'Please Enter a Status';\n        }\n\n        return error;\n      };\n    }\n  }]);\n\n  return CreatePost;\n}(React.Component);\n\nvar fromWrapped = reduxForm({\n  form: 'CreatePost',\n  validate: validate\n})(CreatePost);\nexport default connect(null, {\n  createpost: createpost\n})(fromWrapped);","map":{"version":3,"sources":["/home/vishal/userposts/src/components/posts/CreatePost.js"],"names":["React","Field","reduxForm","connect","createpost","CreatePost","renderInput","input","label","meta","className","error","touched","renderError","onSubmit","formValues","props","localStorage","getItem","handleSubmit","validate","Title","Description","Status","Component","fromWrapped","form"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Field,reduxForm} from 'redux-form';\nimport { connect } from 'react-redux';\nimport { createpost } from '../../actions/index';\n\n\nclass CreatePost extends React.Component{\n\n    renderError({touched,error}){\n        if(touched && error){\n            return(\n                <div className=\"ui error message\">\n                    <div className=\"header\">{error}</div>\n                </div>\n            );\n        }\n    }\n\n    renderInput = ({input,label,meta}) => {\n        const className = `field ${meta.error && meta.touched ? 'error' : ''}`;\n        //console.log(meta);\n        \n        return(\n                <div className={className}>\n                    <label>{label}</label>\n                    <input {...input}  autoComplete=\"off\" />\n                    {this.renderError(meta)}\n            </div>\n        );\n        \n    }\n\n    onSubmit = (formValues) => {\n        this.props.createpost(formValues);\n        \n    }\n\n    render(){\n        //console.log(this.props);\n        if(localStorage.getItem(\"authToken\")){\n        return(\n            <div>\n                <h2>Create Post</h2 >\n            <form onSubmit={this.props.handleSubmit(this.onSubmit)} className=\"ui form error\">\n                <Field inputType=\"text\" name=\"Title\" component={this.renderInput} label=\"Enter Title\" />\n                <Field inputType=\"text\" name=\"Description\" component={this.renderInput} label=\"Enter Description\" />\n                <Field inputType=\"text\" name=\"Status\" component={this.renderInput} label=\"Status\" />\n                <button className=\"ui button primary\">Submit</button>\n            </form>\n            </div>\n            \n        );\n    }\n\n\nconst validate = (formValues) => {\n    const error = {};\n\n    if(!formValues.Title){\n        error.Title = 'Please Enter a title';\n    }\n\n    if(!formValues.Description){\n        error.Description = 'Please Enter a description';\n    }\n\n    if(!formValues.Status){\n        error.Status = 'Please Enter a Status';\n    }\n\n    return error;\n}\n}\n}\n\n\nconst fromWrapped = reduxForm({\n    form : 'CreatePost',\n    validate:validate\n})(CreatePost);\n\nexport default connect(null,{createpost})(fromWrapped);   "]},"metadata":{},"sourceType":"module"}