{"ast":null,"code":"import _classCallCheck from \"/home/vishal/userposts/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/vishal/userposts/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/vishal/userposts/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/vishal/userposts/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/vishal/userposts/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/vishal/userposts/src/components/Register.js\";\nimport React from 'react';\nimport { Field, reduxForm } from 'redux-form';\n\nvar Register =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Register, _React$Component);\n\n  function Register() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Register);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Register)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.renderInput = function (_ref) {\n      var input = _ref.input,\n          label = _ref.label,\n          meta = _ref.meta;\n      var className = \"field \".concat(meta.error && meta.touched ? 'error' : '');\n      console.log(meta);\n      return React.createElement(\"div\", {\n        className: className,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 20\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 21\n        },\n        __self: this\n      }, label), React.createElement(\"input\", Object.assign({}, input, {\n        autoComplete: \"off\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 22\n        },\n        __self: this\n      })), _this.renderError(meta));\n    };\n\n    return _this;\n  }\n\n  _createClass(Register, [{\n    key: \"renderError\",\n    value: function renderError(_ref2) {\n      var touched = _ref2.touched,\n          error = _ref2.error;\n\n      if (touched && error) {\n        return React.createElement(\"div\", {\n          className: \"ui error message\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 8\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"header\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 9\n          },\n          __self: this\n        }, error));\n      }\n    }\n  }, {\n    key: \"onSubmit\",\n    value: function onSubmit(formValues) {\n      console.log(formValues);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      console.log(this.props);\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38\n        },\n        __self: this\n      }, \"Create Post\"), React.createElement(\"form\", {\n        onSubmit: this.props.handleSubmit(this.onSubmit),\n        className: \"ui form error\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39\n        },\n        __self: this\n      }, React.createElement(Field, {\n        inputType: \"text\",\n        name: \"first_name\",\n        component: this.renderInput,\n        label: \"First Name\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40\n        },\n        __self: this\n      }), React.createElement(Field, {\n        inputType: \"text\",\n        name: \"last_name\",\n        component: this.renderInput,\n        label: \"Last Name\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      }), React.createElement(Field, {\n        inputType: \"text\",\n        name: \"user_name\",\n        component: this.renderInput,\n        label: \"UserName\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      }), React.createElement(Field, {\n        inputType: \"email\",\n        name: \"email_id\",\n        component: this.renderInput,\n        label: \"Email ID\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }), React.createElement(Field, {\n        inputType: \"password\",\n        name: \"password\",\n        component: this.renderInput,\n        label: \"Password\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }), React.createElement(Field, {\n        inputType: \"password\",\n        name: \"cfm_password\",\n        component: this.renderInput,\n        label: \"Confirm Password\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        className: \"ui button primary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }, \"Submit\")));\n    }\n  }]);\n\n  return Register;\n}(React.Component);\n\nvar validate = function validate(formValues) {\n  var error = {};\n\n  if (!formValues.first_name) {\n    error.Title = 'Please Enter First Name';\n  }\n\n  if (!formValues.last_name) {\n    error.Description = 'Please Enter Last Name ';\n  }\n\n  if (!formValues.user_name) {\n    error.Status = 'Please Enter Username';\n  }\n\n  if (!formValues.email_id) {\n    error.Status = 'please enter email id';\n  }\n\n  if (!formValues.password) {\n    error.Status = 'Please Enter password';\n  }\n\n  return error;\n};\n\nexport default reduxForm({\n  form: 'CreatePost',\n  validate: validate\n})(Register); //export default Register;","map":{"version":3,"sources":["/home/vishal/userposts/src/components/Register.js"],"names":["React","Field","reduxForm","Register","renderInput","input","label","meta","className","error","touched","console","log","renderError","formValues","props","handleSubmit","onSubmit","Component","validate","first_name","Title","last_name","Description","user_name","Status","email_id","password","form"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Field,reduxForm} from 'redux-form';\n\nclass Register extends React.Component{\n    renderError({touched,error}){\n        if(touched && error){\n            return(\n                <div className=\"ui error message\">\n                    <div className=\"header\">{error}</div>\n                </div>\n            );\n        }\n    }\n\n    renderInput = ({input,label,meta}) => {\n        const className = `field ${meta.error && meta.touched ? 'error' : ''}`;\n        console.log(meta);\n        \n        return(\n                <div className={className}>\n                    <label>{label}</label>\n                    <input {...input} autoComplete=\"off\" />\n                    {this.renderError(meta)}\n            </div>\n        );\n        \n    }\n\n    onSubmit(formValues){\n        console.log(formValues);\n        \n    }\n\n    render(){\n        console.log(this.props);\n        return(\n            <div>\n                <h2>Create Post</h2 >\n            <form onSubmit={this.props.handleSubmit(this.onSubmit)} className=\"ui form error\">\n                <Field  \n                    inputType=\"text\" \n                    name=\"first_name\" \n                    component={this.renderInput} \n                    label=\"First Name\" \n                />\n                <Field  \n                    inputType=\"text\" \n                    name=\"last_name\" \n                    component={this.renderInput} \n                    label=\"Last Name\" \n                />\n                <Field  \n                    inputType=\"text\" \n                    name=\"user_name\" \n                    component={this.renderInput} \n                    label=\"UserName\" \n                />\n                <Field  \n                    inputType=\"email\" \n                    name=\"email_id\" \n                    component={this.renderInput} \n                    label=\"Email ID\" \n                />\n                <Field  \n                    inputType=\"password\" name=\"password\" component={this.renderInput} label=\"Password\" />\n                <Field  inputType=\"password\" name=\"cfm_password\" component={this.renderInput} label=\"Confirm Password\" />\n                <button className=\"ui button primary\">Submit</button>\n            </form>\n            </div>\n            \n        );\n    }\n}\n\nconst validate = (formValues) => {\n    const error = {};\n\n    if(!formValues.first_name){\n        error.Title = 'Please Enter First Name';\n    }\n\n    if(!formValues.last_name){\n        error.Description = 'Please Enter Last Name ';\n    }\n\n    if(!formValues.user_name){\n        error.Status = 'Please Enter Username';\n    }\n\n    if(!formValues.email_id){\n        error.Status = 'please enter email id';\n    }\n\n    if(!formValues.password){\n        error.Status = 'Please Enter password';\n    }\n\n    return error;\n\n}\n\nexport default reduxForm({\n    form : 'CreatePost',\n    validate:validate\n})(Register);\n//export default Register;"]},"metadata":{},"sourceType":"module"}