{"ast":null,"code":"import _classCallCheck from \"/home/vishal/userposts/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/vishal/userposts/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/vishal/userposts/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/vishal/userposts/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/vishal/userposts/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/vishal/userposts/src/components/user/Register.js\";\nimport React from 'react';\nimport _ from 'lodash';\nimport { Field, reduxForm } from 'redux-form';\nimport { RegisterUser } from '../../actions/index';\nimport { connect } from 'react-redux';\n\nvar Register =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Register, _React$Component);\n\n  function Register() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Register);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Register)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.renderInput = function (_ref) {\n      var input = _ref.input,\n          type = _ref.type,\n          label = _ref.label,\n          meta = _ref.meta;\n      var className = \"field \".concat(meta.error && meta.touched ? 'error' : '');\n      return React.createElement(\"div\", {\n        className: className,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 24\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 25\n        },\n        __self: this\n      }, label), React.createElement(\"input\", Object.assign({}, input, {\n        type: type,\n        autoComplete: \"off\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 26\n        },\n        __self: this\n      })), _this.renderError(meta));\n    };\n\n    _this.onSubmit = function (formValues) {\n      var role = {\n        role: 'author'\n      };\n      formValues = _.assign(formValues);\n      console.log(role);\n\n      _this.props.RegisterUser(formValues);\n    };\n\n    return _this;\n  }\n\n  _createClass(Register, [{\n    key: \"renderError\",\n    value: function renderError(_ref2) {\n      var touched = _ref2.touched,\n          error = _ref2.error;\n\n      //console.log({errors});\n      if (touched && error) {\n        return React.createElement(\"div\", {\n          className: \"ui error message\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 13\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"header\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 14\n          },\n          __self: this\n        }, error));\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      //console.log(this.props);\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47\n        },\n        __self: this\n      }, \"Registeration Form\"), React.createElement(\"form\", {\n        onSubmit: this.props.handleSubmit(this.onSubmit),\n        className: \"ui form error\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48\n        },\n        __self: this\n      }, React.createElement(Field, {\n        type: \"text\",\n        name: \"first_name\",\n        component: this.renderInput,\n        label: \"First Name\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      }), React.createElement(Field, {\n        type: \"text\",\n        name: \"last_name\",\n        component: this.renderInput,\n        label: \"Last Name\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      }), React.createElement(Field, {\n        type: \"text\",\n        name: \"username\",\n        component: this.renderInput,\n        label: \"UserName\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      }), React.createElement(Field, {\n        type: \"email\",\n        name: \"email\",\n        component: this.renderInput,\n        label: \"Email ID\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }), React.createElement(Field, {\n        type: \"password\",\n        name: \"password\",\n        component: this.renderInput,\n        label: \"Password\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      }), React.createElement(Field, {\n        type: \"password\",\n        name: \"cfm_password\",\n        component: this.renderInput,\n        label: \"Confirm Password\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      }), React.createElement(Field, {\n        type: \"text\",\n        name: \"role\",\n        component: this.renderInput,\n        label: \"Role\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        type: \"submit\",\n        className: \"ui button primary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }, \"Submit\")));\n    }\n  }]);\n\n  return Register;\n}(React.Component);\n\nvar validate = function validate(formValues) {\n  var errors = {};\n\n  if (!formValues.first_name) {\n    errors.first_name = 'Please Enter First Name';\n  } else if (formValues.first_name.length > 15) {\n    errors.first_name = 'Must be 15 characters or less';\n  }\n\n  if (!formValues.last_name) {\n    errors.last_name = 'Please Enter Last Name ';\n  } else if (formValues.last_name.length > 15) {\n    errors.last_name = 'Must be 12 characters or less';\n  }\n\n  if (!formValues.username) {\n    errors.username = 'Please Enter Username';\n  } else if (formValues.username.length > 15) {\n    errors.username = 'Must be 15 characters or less';\n  }\n\n  if (!formValues.email) {\n    errors.email = 'please enter email id';\n  } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(formValues.email)) {\n    errors.email = 'Invalid email address';\n  }\n\n  if (!formValues.password) {\n    errors.password = 'Required';\n  }\n\n  if (!formValues.cfm_password) {\n    errors.cfm_password = 'Required';\n  } else if (formValues.cfm_password !== formValues.password) {\n    errors.cfm_password = 'Password mismatched';\n  }\n\n  if (!formValues.role) {\n    errors.role = 'Please Enter Role';\n  }\n\n  return errors;\n};\n\nvar Wrapped = reduxForm({\n  form: 'Register',\n  validate: validate\n})(Register);\nexport default connect(null, {\n  RegisterUser: RegisterUser\n})(Wrapped);","map":{"version":3,"sources":["/home/vishal/userposts/src/components/user/Register.js"],"names":["React","_","Field","reduxForm","RegisterUser","connect","Register","renderInput","input","type","label","meta","className","error","touched","renderError","onSubmit","formValues","role","assign","console","log","props","handleSubmit","Component","validate","errors","first_name","length","last_name","username","email","test","password","cfm_password","Wrapped","form"],"mappings":"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","sourcesContent":["import React from 'react';\nimport _ from 'lodash';\nimport { Field,reduxForm} from 'redux-form';\nimport { RegisterUser } from '../../actions/index';\nimport { connect } from 'react-redux';\n\nclass Register extends React.Component{\n    renderError({touched,error}){\n        //console.log({errors});\n        \n        if(touched && error){\n            return(\n                <div className=\"ui error message\">\n                    <div className=\"header\">{error}</div>\n                </div>\n            );\n        }\n    }\n\n    renderInput = ({input,type,label,meta}) => {\n        const className = `field ${meta.error && meta.touched ? 'error' : ''}`;\n        \n        return(\n                <div className={className}>\n                    <label>{label}</label>\n                    <input {...input} type={type} autoComplete=\"off\" />\n                    {this.renderError(meta)}\n            </div>\n        );\n        \n    }\n\n    onSubmit = (formValues) => {\n        let role = {\n            role:'author'\n          }\n          formValues = _.assign(formValues)\n          console.log(role);\n        this.props.RegisterUser(formValues);\n        \n    }\n\n    render(){\n        //console.log(this.props);\n        return(\n            <div>\n                <h2>Registeration Form</h2 >\n            <form onSubmit={this.props.handleSubmit(this.onSubmit)} className=\"ui form error\">\n                <Field  \n                    type=\"text\" \n                    name=\"first_name\" \n                    component={this.renderInput} \n                    label=\"First Name\" \n                />\n                <Field  \n                    type=\"text\" \n                    name=\"last_name\" \n                    component={this.renderInput} \n                    label=\"Last Name\" \n                />\n                <Field  \n                    type=\"text\" \n                    name=\"username\" \n                    component={this.renderInput} \n                    label=\"UserName\" \n                />\n                <Field  \n                    type=\"email\" \n                    name=\"email\" \n                    component={this.renderInput} \n                    label=\"Email ID\" \n                />\n                <Field  \n                    type=\"password\" \n                    name=\"password\" \n                    component={this.renderInput} \n                    label=\"Password\" \n                />\n\n                <Field  \n                    type=\"password\" \n                    name=\"cfm_password\" \n                    component={this.renderInput} \n                    label=\"Confirm Password\" \n                />\n                \n                <Field  \n                    type=\"text\" \n                    name=\"role\" \n                    component={this.renderInput} \n                    label=\"Role\" \n                />\n                <button type=\"submit\" className=\"ui button primary\">Submit</button>\n            </form>\n            </div>\n            \n        );\n    }\n}\n\nconst validate = (formValues) => {\n    const errors = {};\n\n    if(!formValues.first_name){\n        errors.first_name = 'Please Enter First Name';\n    }\n    else if (formValues.first_name.length > 15) {\n    errors.first_name = 'Must be 15 characters or less'\n  }\n\n    if(!formValues.last_name){\n        errors.last_name = 'Please Enter Last Name ';\n    }\n    else if (formValues.last_name.length > 15  ) {\n        errors.last_name = 'Must be 12 characters or less'\n      }\n\n    if(!formValues.username){\n        errors.username = 'Please Enter Username';\n    }\n    else if (formValues.username.length > 15) {\n        errors.username = 'Must be 15 characters or less'\n      }\n\n    if(!formValues.email){\n        errors.email = 'please enter email id';\n    }\n    else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(formValues.email)) {\n        errors.email = 'Invalid email address'\n      }\n\n      if (!formValues.password) {\n        errors.password = 'Required';\n      }\n      if (!formValues.cfm_password ) {\n        errors.cfm_password = 'Required' ;\n      } else if (formValues.cfm_password !== formValues.password) {\n        errors.cfm_password = 'Password mismatched' ;\n      }\n\n    if(!formValues.role){\n        errors.role = 'Please Enter Role';\n    }\n\n\n    return errors;\n\n}\n\nconst Wrapped = reduxForm({\n    form : 'Register',\n    validate\n})(Register);\n\nexport default connect(null,{RegisterUser})(Wrapped);"]},"metadata":{},"sourceType":"module"}