{"ast":null,"code":"import _classCallCheck from \"/home/vishal/userposts/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/vishal/userposts/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/vishal/userposts/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/vishal/userposts/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/vishal/userposts/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/vishal/userposts/src/components/posts/CreatePost.js\";\nimport React from 'react';\nimport { Field, reduxForm } from 'redux-form';\nimport { connect } from 'react-redux';\nimport { createPostAction } from '../../actions/index';\n\nvar CreatePost =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(CreatePost, _React$Component);\n\n  function CreatePost() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, CreatePost);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(CreatePost)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.renderInput = function (_ref) {\n      var input = _ref.input,\n          label = _ref.label,\n          meta = _ref.meta,\n          inputType = _ref.inputType,\n          idLable = _ref.idLable;\n      var className = \"field \".concat(meta.error && meta.touched ? 'error' : ''); //console.log(meta);\n\n      return React.createElement(\"div\", {\n        className: className,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 24\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 25\n        },\n        __self: this\n      }, label), React.createElement(\"input\", Object.assign({}, input, {\n        autoComplete: \"off\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27\n        },\n        __self: this\n      })), _this.renderError(meta));\n    };\n\n    _this.renderInputDropDown = function (_ref2) {\n      var input = _ref2.input,\n          label = _ref2.label,\n          meta = _ref2.meta;\n      var className = \"field \".concat(meta.error && meta.touched ? 'error' : '');\n      return React.createElement(\"div\", {\n        className: className,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40\n        },\n        __self: this\n      }, label), React.createElement(\"select\", Object.assign({}, input, {\n        autoComplete: \"off\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41\n        },\n        __self: this\n      }), React.createElement(\"option\", {\n        val: \"publish\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42\n        },\n        __self: this\n      }, \"publish\"), React.createElement(\"option\", {\n        component: \"future\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43\n        },\n        __self: this\n      }, \"future\"), React.createElement(\"option\", {\n        component: \"draft\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      }, \"draft\"), React.createElement(\"option\", {\n        component: \"pending\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45\n        },\n        __self: this\n      }, \"pending\"), React.createElement(\"option\", {\n        component: \"private\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      }, \"private\")), _this.renderError(meta));\n    };\n\n    _this.onSubmit = function (formValues) {\n      _this.props.createPostAction(formValues);\n    };\n\n    return _this;\n  }\n\n  _createClass(CreatePost, [{\n    key: \"renderError\",\n    value: function renderError(_ref3) {\n      var touched = _ref3.touched,\n          error = _ref3.error;\n\n      if (touched && error) {\n        return React.createElement(\"div\", {\n          className: \"ui error message\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 12\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"header\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 13\n          },\n          __self: this\n        }, error));\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      //console.log(this.props);\n      //if(localStorage.getItem(\"authToken\")){\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }, \"Create Post\"), React.createElement(\"form\", {\n        onSubmit: this.props.handleSubmit(this.onSubmit),\n        className: \"ui form error\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }, React.createElement(Field, {\n        inputType: \"text\",\n        name: \"title\",\n        component: this.renderInput,\n        label: \"Enter Title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }), React.createElement(Field, {\n        inputType: \"text\",\n        name: \"content\",\n        component: this.renderInput,\n        label: \"Enter Description\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }), React.createElement(Field, {\n        name: \"status\",\n        component: this.renderInputDropDown,\n        label: \"Status\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        className: \"ui button primary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      }, \"Submit\")));\n    }\n  }]);\n\n  return CreatePost;\n}(React.Component); //publish, future, draft, pending, private\n\n/* <option component=\"publish\">publish</option>\n            <option component=\"future\">future</option>\n            <option component=\"draft\">draft</option>\n            <option component=\"pending\">pending</option>\n            <option component=\"private\">private</option> */\n\n\nvar validate = function validate(formValues) {\n  var error = {};\n\n  if (!formValues.title) {\n    error.title = 'Please Enter a title';\n  }\n\n  if (!formValues.content) {\n    error.content = 'Please Enter a description';\n  }\n\n  if (!formValues.status) {\n    error.status = 'Please Enter a Status';\n  }\n\n  return error;\n};\n\nvar fromWrapped = reduxForm({\n  form: 'CreatePost',\n  validate: validate\n})(CreatePost);\nexport default connect(null, {\n  createPostAction: createPostAction\n})(fromWrapped);","map":{"version":3,"sources":["/home/vishal/userposts/src/components/posts/CreatePost.js"],"names":["React","Field","reduxForm","connect","createPostAction","CreatePost","renderInput","input","label","meta","inputType","idLable","className","error","touched","renderError","renderInputDropDown","onSubmit","formValues","props","handleSubmit","Component","validate","title","content","status","fromWrapped","form"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Field,reduxForm} from 'redux-form';\nimport { connect } from 'react-redux';\nimport { createPostAction } from '../../actions/index';\n\n\nclass CreatePost extends React.Component{\n\n    renderError({touched,error}){\n        if(touched && error){\n            return(\n                <div className=\"ui error message\">\n                    <div className=\"header\">{error}</div>\n                </div>\n            );\n        }\n    }\n\n    renderInput = ({input,label,meta,inputType,idLable }) => {\n        const className = `field ${meta.error && meta.touched ? 'error' : ''}`;\n        //console.log(meta);\n        \n        return(\n                <div className={className}>\n                    <label>{label}</label>\n                    \n                    <input {...input}  autoComplete=\"off\" />\n                    {this.renderError(meta)}\n            </div>\n        );\n        \n    }\n\n    renderInputDropDown = ({input,label,meta}) => {\n        const className = `field ${meta.error && meta.touched ? 'error' : ''}`;\n\n        return(\n            <div className={className}>\n\n            <label>{label}</label>\n            <select {...input} autoComplete=\"off\" >\n            <option val=\"publish\">publish</option>\n            <option component=\"future\">future</option>\n            <option component=\"draft\">draft</option>\n            <option component=\"pending\">pending</option>\n            <option component=\"private\">private</option>  \n            </select>\n            {this.renderError(meta)}\n            </div>\n        );\n    }\n    /*if(inputType === \"select\") {\n        /* onScroll={this.onScrollThatCallsPreventDefault}\n      onScrollPassive={this.onScrollThatJustListens} */\n       \n\n    onSubmit = (formValues) => {\n        this.props.createPostAction(formValues);\n        \n    }\n\n    render(){\n        //console.log(this.props);\n        //if(localStorage.getItem(\"authToken\")){\n        return(\n            <div>\n                <h2>Create Post</h2 >\n            <form onSubmit={this.props.handleSubmit(this.onSubmit)} className=\"ui form error\">\n                <Field inputType=\"text\" name=\"title\" component={this.renderInput} label=\"Enter Title\" />\n                <Field inputType=\"text\" name=\"content\" component={this.renderInput} label=\"Enter Description\" />\n                <Field  name=\"status\" component={this.renderInputDropDown} label=\"Status\" />   \n                      \n                <button className=\"ui button primary\">Submit</button>\n            </form>\n            </div>\n            \n        );\n    }\n}\n//publish, future, draft, pending, private\n/* <option component=\"publish\">publish</option>\n            <option component=\"future\">future</option>\n            <option component=\"draft\">draft</option>\n            <option component=\"pending\">pending</option>\n            <option component=\"private\">private</option> */\n\nconst validate = (formValues) => {\n    const error = {};\n\n    if(!formValues.title){\n        error.title = 'Please Enter a title';\n    }\n\n    if(!formValues.content){\n        error.content = 'Please Enter a description';\n    }\n\n    if(!formValues.status){\n        error.status = 'Please Enter a Status';\n    }\n\n    return error;\n}\n\n\nconst fromWrapped = reduxForm({\n    form : 'CreatePost',\n    validate:validate\n})(CreatePost);\n\nexport default connect(null,{createPostAction})(fromWrapped);   "]},"metadata":{},"sourceType":"module"}